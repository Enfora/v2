from settings_manager import save_settings_manager, load_settings_manager
from interface_manager import Init_Interface_Settings_manager

import random
import customtkinter as CTk
import win32print
import tkinter.filedialog as filedialog
import tkinter.messagebox as messagebox
import os
import json
import sys
import time
import win32com.client as win32

import asyncio
import aiohttp
import threading

from tkcalendar import Calendar
from datetime import datetime
from datetime import date

import barcode
from barcode.writer import ImageWriter

from io import BytesIO
from PIL import ImageTk, Image


class SimpleConsole(CTk.CTkTextbox):
    """
    –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    –ù–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç CTkTextbox –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç stdout
    """

    def __init__(self, master, **kwargs):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        kwargs.setdefault("fg_color", "black")
        kwargs.setdefault("text_color", "white")
        kwargs.setdefault("font", ("Consolas", 11))
        kwargs.setdefault("wrap", "word")

        super().__init__(master, **kwargs)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π stdout –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥
        self.old_stdout = sys.stdout
        sys.stdout = self

        # –î–µ–ª–∞–µ–º –∫–æ–Ω—Å–æ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        self.configure(state="disabled")

    def write(self, text):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–≤–æ–¥ –∏–∑ print() –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ"""
        self.configure(state="normal")  # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.insert("end", text)
        self.see("end")
        self.configure(state="disabled")  # –°–Ω–æ–≤–∞ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        self.update_idletasks()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

    def flush(self):
        """–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å sys.stdout"""
        pass

    def clear(self):
        """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å"""
        self.configure(state="normal")
        self.delete("1.0", "end")
        self.configure(state="disabled")

    def destroy(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π stdout –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏"""
        sys.stdout = self.old_stdout
        super().destroy()


class App(CTk.CTk):
    def __init__(self):
        super().__init__()

        # BAR TANDER
        self.console = None
        self.bar_tender_enable = False
        self.btApp = None

        # –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ
        self.getWeightEnable = False

        self.stable_counter = int(0)
        self.array_weight = list()
        self.stable_weight = 0
        self.data_for_bartender = date.today()
        self.data_for_bartender = self.data_for_bartender.strftime(
            "%d.%m.%Y"
        )  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É

        self.count_pieces = 0  # —Å—á–µ—Ç—á–∫–∏ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π, –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ self.pieces_entry (–ø–æ–ª–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ)

        # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        self.calendar_window = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å win32print –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
        self.WIN32PRINT_AVAILABLE = self.check_win32print_availability()
        self.available_printers = self.get_available_printers()

        self.Init_Interface_Settings()  # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫

        self.initialize_bar_tender()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BarTender

        if self.WIN32PRINT_AVAILABLE:
            print("‚ö† –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ")

        load_settings_manager(self)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –≤–µ—Å–æ–≤
        self.poll_interval_current = float(1)
        if self.poll_interval.get().strip() == "":
            self.poll_interval_current = float(1)
        else:
            self.poll_interval_current = float(self.poll_interval.get())
        print(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –≤–µ—Å–æ–≤  = {self.poll_interval_current} —Å–µ–∫.")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–µ—Å–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.start_weight_monitoring()

    def Init_Interface_Settings(self):
        Init_Interface_Settings_manager(self)

    def getWeightThreading_Enable(self):
        print("–°—Ç–∞—Ä—Ç –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è.")

        self.getWeightEnable = True

        # –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ —É —Ñ—Ä–µ–π–º–∞ (—Ç–∞–±–ª–æ –≤–µ—Å–∞)
        self.current_weight_frame.configure(fg_color="#00920C")
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤–æ–π –ø–µ—á–∞—Ç–∏ —Å—Ç–∞–≤–∏–º OFF
        self.switch_demo.deselect()

    def getWeightThreading_Disable(self):
        print("–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è.")
        self.getWeightEnable = False
        # –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ —É —Ñ—Ä–µ–π–º–∞ (—Ç–∞–±–ª–æ –≤–µ—Å–∞)
        self.current_weight_frame.configure(fg_color="#000000")

    def switch_demo_printer(self):
        pass

    def start_weight_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–µ—Å–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å asyncio"""

        def run_async():
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:

                ip_address = self.ip_address.get().strip()

                url = f"http://{ip_address}/rawdata.html"
                loop.run_until_complete(self.basic_get(url))

            finally:
                loop.close()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run_async, daemon=True)
        thread.start()

    async def basic_get(self, url):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–µ—Å–æ–≤"""

        async with aiohttp.ClientSession() as session:
            while True:
                try:
                    async with session.get(url, timeout=2) as response:

                        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                        if response.status != 200:
                            print(
                                f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status} - {response.reason}"
                            )
                            await asyncio.sleep(1)
                            continue

                        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        data = await response.text()
                        listData = data.strip().split("\n")

                        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
                        if not listData or not listData[0].strip():
                            print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ—Å–æ–≤")
                            await asyncio.sleep(0.2)
                            continue

                        # ‚úÖ –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
                        weight_value = float(listData[0])
                        weight_value = (
                            weight_value if weight_value >= 0 else 0
                        )  # –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
                        # print(f"‚úÖ –í–µ—Å: {weight_value:.3f}")

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        self.update_weight_display(weight_value)
                        self.update_weight_table(weight_value)

                except asyncio.TimeoutError:
                    print("‚è∞ –¢–∞–π–º–∞—É—Ç: –í–µ—Å—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã")
                except aiohttp.ClientError as e:
                    print(f"üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                except ValueError as e:
                    print(f"üî¢ –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–µ –º–æ–≥—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ")
                except IndexError:
                    print("üìã –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)

                await asyncio.sleep(self.poll_interval_current)

    def update_weight_display(self, weight_value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—Å–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        try:
            self.current_weight.configure(text=f"{weight_value:.3f}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")

    def update_weight_table(self, weight_value, test_mode=False):  # –í—Å—Ç–∞–≤–∫–∞ –≤–µ—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü—É

        if self.getWeightEnable and test_mode: #–ï—Å–ª–∏ —Ä–µ–∂–∏–º –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            weight_value = 0
            return
        
        # if self.getWeightEnable != True and test_mode != True: #–ï—Å–ª–∏ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        #     weight_value = 0
        #     return

        if weight_value <= float(
            self.zero_threshold.get()
        ):  # –ï—Å–ª–∏ –≤–µ—Å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –ø–æ—Ä–æ–≥—É –Ω—É–ª—è
            self.array_weight.clear()
            self.stable_weight = 0
            return
        
        if test_mode:
            #–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ç—Ç–∏–º –≤–µ—Å–æ–º, —ç–º—É–ª–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ —Å –≤–µ—Å–æ–≤
            self.array_weight.clear() # –æ—á–∏—â–∞–µ–º
            self.array_weight = [weight_value] * int(self.stability_threshold.get()) # –ó–∞–ø–æ–ª–Ω—è–µ–º
            self.stable_weight = weight_value #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ—Å 

        if len(self.array_weight) < float(self.stability_threshold.get()):
            self.array_weight.append(weight_value)
        else:
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–µ—Å
            if len((set(self.array_weight))) == 1:

                weight_value = self.array_weight[0]

                rounded_weight = round(weight_value, 2)  # –æ–∫—Ä—É–≥–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ—Å
                rounded_stable = round(self.stable_weight, 2)  # –æ–∫—Ä—É–≥–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ—Å

                if abs(rounded_stable - rounded_weight) >= 0.05 or rounded_weight == rounded_stable:
                    self.stable_weight = weight_value

                    self.add_to_table(weight_value)  # –í—ã–≤–æ–¥–∏–º –≤–µ—Å –≤ —Ç–∞–±–ª–∏—Ü—É
                    self.activated_barTender_process(
                        weight_value
                    )  # –í—ã–∑—ã–≤–∞–µ–º –±–∞—Ä—Ç–µ–Ω–¥–µ—Ä –Ω–æ –æ–Ω –≤ –¥—Ä—É–≥–æ–º –ø–æ—Ç–æ–∫–µ

            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            self.array_weight.clear()

    # –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –≤–µ—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
    def add_to_table(self, weight_value):
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        history_entry = f"{timestamp}    {weight_value:.3f} –∫–≥\n"

        self.weights_table.configure(state="normal")
        self.weights_table.insert("end", history_entry)
        self.weights_table.see("end")
        self.weights_table.configure(state="disabled")

    def activated_barTender_process(self, weight_value):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—á–∞—Ç–∏ - –≤—ã–∑–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        # –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
        if self.bar_tender_enable != True:
            print("BarTender –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            return
        self.after(0, lambda: self.launch_bar_tender_in_main_thread(weight_value,))

    # region –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§–£–ù–ö–¶–ò–ò

    def validate_numeric_input(self, new_text):  # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–∏—Ñ—Ä
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"""
        return new_text.isdigit() or new_text == ""

    def validate_float_input(self, new_text):  # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–∏—Ñ—Ä —Å —Ç–æ—á–∫–æ–π
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–æ–¥ —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π"""
        if new_text == "" or new_text == "-":
            return True
        try:
            float(new_text)
            return True
        except ValueError:
            return False

    def check_win32print_availability(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å win32print"""
        try:
            import win32print

            return True
        except ImportError:
            return False

    def get_available_printers(self):  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        printers = []

        if not self.WIN32PRINT_AVAILABLE:
            print("‚ö† –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return printers
        try:
            for printer in win32print.EnumPrinters(
                win32print.PRINTER_ENUM_LOCAL | win32print.PRINTER_ENUM_CONNECTIONS
            ):
                printers.append(printer[2])

            return printers
        except Exception as e:
            return printers

    def browse_btw_file(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ .btw —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞",
            filetypes=[("–§–∞–π–ª—ã —à–∞–±–ª–æ–Ω–æ–≤", "*.btw"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
        )

        if file_path and self.validate_btw_file(file_path):
            self.template_entry.delete(0, "end")
            self.template_entry.insert(0, file_path)

    def browse_btw_file_total(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ .btw —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞",
            filetypes=[("–§–∞–π–ª—ã —à–∞–±–ª–æ–Ω–æ–≤", "*.btw"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
        )

        if file_path and self.validate_btw_file(file_path):
            self.template_entry_total.delete(0, "end")
            self.template_entry_total.insert(0, file_path)

    def validate_btw_file(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .btw"""
        file_ext = os.path.splitext(file_path)[1].lower()

        if file_ext != ".btw":
            messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .btw!")
            return False

        if not os.path.isfile(file_path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return False

        return True

    def browse_directory_pdf(self):
        self.browse_directory(self.pdf_path)

    def browse_directory(self, entry_widget):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        directory = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É")
        if directory:
            entry_widget.delete(0, "end")
            entry_widget.insert(0, directory)

    # –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π

    def clear_table(self):
        self.weights_table.configure(state="normal")
        self.weights_table.delete("1.0", "end")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        header = "–í–†–ï–ú–Ø                  –í–ï–° (–∫–≥)\n"
        header += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        self.weights_table.insert("1.0", header)
        self.weights_table.configure(state="disabled")

        print("–¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—á–∏—â–µ–Ω–∞")

    # ----------------------------------------------------------------

    # –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –ù–ê–°–¢–†–û–ï–ö, –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    def save_settings(self):
        save_settings_manager(self)

    def load_settings(self):
        load_settings_manager(self)

    # –§–£–ù–ö–¶–ò–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò BARTENDER

    def initialize_bar_tender(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BarTender"""
        try:
            if self.bar_tender_enable:
                # messagebox.showinfo("Info", "BarTender —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
                print("‚Ñπ BarTender —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return

            self.btApp = win32.Dispatch("BarTender.Application")
            self.btApp.Visible = False

            self.bar_tender_enable = True
            # messagebox.showinfo("Success", "BarTender —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            print("‚úì BarTender —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            self.bar_tender_enable = False
            self.btApp = None
            error_msg = f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BarTender: {str(e)}"
            # messagebox.showerror("Error", error_msg)
            print(f"‚úó {error_msg}")

    # region –§–£–ù–ö–¶–ò–ò –¢–ï–†–ú–ò–ù–ê–õ–ê
    def create_console_frame(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ—Ä–µ–π–º —Å –∫–æ–Ω—Å–æ–ª—å—é –∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = CTk.CTkFrame(parent)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = CTk.CTkFrame(main_frame)
        button_frame.pack(fill="x", padx=5, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
        clear_btn = CTk.CTkButton(
            button_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å", command=self.clear_console, width=120
        )
        clear_btn.pack(side="left", padx=5)

        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        test_btn = CTk.CTkButton(
            button_frame, text="–í–µ—Ä—Å–∏—è", command=self.version_console_output, width=120
        )
        test_btn.pack(side="left", padx=5)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å
        self.console = SimpleConsole(main_frame, height=400)
        self.console.pack(fill="both", expand=True, padx=5, pady=5)

        return main_frame

    def clear_console(self):
        """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å"""
        if hasattr(self, "console"):
            self.console.clear()
            print("–ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞")

    def version_console_output(self):
        """–¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("=" * 50)
        print("–¢–ï–°–¢–û–í–´–ô –í–´–í–û–î –í –ö–û–ù–°–û–õ–¨")
        print(
            f"–í—Ä–µ–º—è: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        print("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–µ–¥–µ–Ω–æ —á–µ—Ä–µ–∑ print()")
        print("–í–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: v.1, enfora@mail.ru")
        print("=" * 50)

    # endregion

    # region –ö–ê–õ–ï–ù–î–ê–†–¨

    def open_calendar(self):
        if self.calendar_window is None or not self.calendar_window.winfo_exists():
            # –°–æ–∑–¥–∞–µ–º Toplevel –æ–∫–Ω–æ (–∏–∑ tkinter)
            self.calendar_window = CTk.CTkToplevel(self)
            self.calendar_window.title("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É")
            self.calendar_window.geometry("400x400")
            self.calendar_window.transient(self)  # –ü–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            self.calendar_window.grab_set()  # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ñ–æ–∫—É—Å

            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
            self.center_calendar_window()

            # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å (–∏–∑ tkcalendar)
            calendar = Calendar(
                self.calendar_window,
                selectmode="day",
                year=datetime.now().year,
                month=datetime.now().month,
                day=datetime.now().day,
                date_pattern="dd.mm.yyyy",
            )
            calendar.pack(pady=20, padx=20, fill="both", expand=True)
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
            select_btn = CTk.CTkButton(
                self.calendar_window,
                text="–í—ã–±—Ä–∞—Ç—å",
                hover_color="#C0C0C0",
                command=lambda: self.select_date(calendar),
            )
            select_btn.pack(pady=10)

            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            cancel_btn = CTk.CTkButton(
                self.calendar_window,
                text="–û—Ç–º–µ–Ω–∞",
                command=self.calendar_window.destroy,
                fg_color="#424242",
                hover_color="#C0C0C0",
                border_width=1,
            )
            cancel_btn.pack(pady=5)
        else:
            self.calendar_window.lift()  # –ü–æ–¥–Ω–∏–º–∞–µ–º –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö

    def select_date(self, calendar):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        selected_date = calendar.get_date()
        self.data_for_bartender = selected_date

        # self.date_entry.delete(0, "end")
        # self.date_entry.insert(0, selected_date)

        self.calendar_window.destroy()
        self.calendar_window = None

    def center_calendar_window(self):

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        self.calendar_window.update_idletasks()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        main_width = self.winfo_width()
        main_height = self.winfo_height()
        main_x = self.winfo_x()
        main_y = self.winfo_y()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_width = 400
        calendar_height = 400

        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        x = main_x + (main_width - calendar_width) // 2
        y = main_y + (main_height - calendar_height) // 2

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        self.calendar_window.geometry(f"{calendar_width}x{calendar_height}+{x}+{y}")

    # endregion

    # region –¢–ï–°–¢–û–í–û–ï –í–ó–í–ï–®–ò–í–ê–ù–ò–ï –î–õ–Ø –®–¢–†–ò–•–ö–û–î–ê
    def generate_weight_test(self):
        kg = random.randint(0, 99)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞–º–º—ã –æ—Ç 0 –¥–æ 999
        grams = random.randint(0, 999)

        weight = f"{kg}.{grams:03d}"

        self.weight_entry_test.delete(0, "end")  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
        self.weight_entry_test.insert(0, str(weight))  # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å

        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ –ø–æ–ª—è
        article = self.article_entry.get().strip()

        if article:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–µ—Å –≤ 5 —Ü–∏—Ñ—Ä: 2 —Ü–∏—Ñ—Ä—ã –∫–≥ + 3 —Ü–∏—Ñ—Ä—ã –≥—Ä–∞–º–º
            weight_for_barcode = f"{kg:02d}{grams:03d}"  # –í—Å–µ–≥–¥–∞ 5 —Ü–∏—Ñ—Ä

            # –ü—Ä–∏—Ü–µ–ø–ª—è–µ–º –≤–µ—Å –∫ –∞—Ä—Ç–∏–∫—É–ª—É
            barcode_data = article + weight_for_barcode

            print(f"–ê—Ä—Ç–∏–∫—É–ª: {article}")
            print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞: {barcode_data}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—Ç—Ä–∏—Ö-–∫–æ–¥
            try:
                ean = barcode.get("ean13", barcode_data, writer=ImageWriter())

                buffer = BytesIO()
                ean.write(buffer)
                buffer.seek(0)

                pil_image = Image.open(buffer)
                ctk_image = CTk.CTkImage(
                    light_image=pil_image, dark_image=pil_image, size=(200, 80)
                )

                self.test_barcode_label.configure(image=ctk_image, text="")
                print(f"–®—Ç—Ä–∏—Ö-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {barcode_data}")

                # if self.bar_tender_enable != True:
                #     print("BarTender –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                # return
                enable_demo_print = self.switch_demo.get()
                self.launch_bar_tender_in_main_thread(barcode_data, float(weight), self.data_for_bartender, False)
                self.update_weight_table(float(weight), True)

            except Exception as e:
                return

                # print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞: {e}")
                # self.test_barcode_label.configure(text="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

            print(f"–í–µ—Å: {self.weight_entry_test.get()}")

    # endregion

    # region –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–∏ BARTENDER

    def launch_bar_tender_in_main_thread(self, barcode_data: str, weight: float, data_for_bartender: str, print=False):

        current_dir = os.path.dirname(os.path.abspath(__file__))
        temp_path_jpg = os.path.join(current_dir, "temp.JPG")

        if os.path.exists(temp_path_jpg):
            os.remove(temp_path_jpg)

        template_path = self.template_entry.get()

        name_unit_printer = self.unit_printer_combo.get()

        btFormat = self.btApp.Formats.Open(template_path, False, name_unit_printer)

        # btFormat = self.btApp.Formats.Open(template_path, False, "TSC TE210")
        btFormat.SetNamedSubStringValue("bt_shtrih", barcode_data)
        btFormat.SetNamedSubStringValue("bt_massa", weight)
        btFormat.SetNamedSubStringValue("bt_data", data_for_bartender)

        btFormat.ExportToFile(temp_path_jpg, "JPEG", 1, 300, 1)
        btFormat.IdenticalCopiesOfLabel = 1
        PrintName = "TSC TE210"
        # btFormat.PrintOut(True, False)  # –ü–µ—á–∞—Ç—å (ShowDialog, WaitUntilCompleted)

        imgShtrih = Image.open(temp_path_jpg)  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É JPG —Ñ–∞–π–ª—É
        imgShtrih = imgShtrih.resize((500, 400))  # –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞)

        # –°–æ–∑–¥–∞–µ–º CTkImage –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–µ—Ç–∫—É
        new_photo = CTk.CTkImage(
            light_image=imgShtrih, dark_image=imgShtrih, size=(350, 250)
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–µ—Ç–∫–µ
        self.photo.configure(image=new_photo)

    # endregion
